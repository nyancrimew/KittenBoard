def Properties properties = new Properties()
properties.load(project.rootProject.file("local.properties").newDataInputStream())

buildscript {
    ext.kotlin_version = '1.6.21'

    repositories {
        google()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.2.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.mozilla.rust-android-gradle:plugin:0.9.3'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

def rustProfile
android {
    compileSdkVersion 32

    // Required if using classes in android.test.runner
    useLibrary 'android.test.runner'

    // Required if using classes in android.test.base
    useLibrary 'android.test.base'

    // Required if using classes in android.test.mock
    useLibrary 'android.test.mock'

    defaultConfig {
        minSdk 21
        targetSdk 32
        versionName "1.0"
        versionCode 30

        applicationId 'gay.crimew.inputmethod.latin'
        testApplicationId 'gay.crimew.inputmethod.latin.tests'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = false

        signingConfig signingConfigs.debug
    }

    signingConfigs {
        var localKeystore = properties.getProperty("keystore.path", System.getenv("KEYSTORE_PATH"))
        debug {
            storeFile file("java/shared.keystore")
            if (localKeystore != null) {
                storeFile = file(localKeystore)
                storePassword = properties.getProperty("keystore.pass", System.getenv("KEYSTORE_PASS"))
                keyAlias = properties.getProperty("keystore.alias", System.getenv("KEYSTORE_ALIAS"))
                keyPassword = properties.getProperty("keystore.keyPass", System.getenv("KEYSTORE_KEYPASS"))
            }
        }
        release {
            if (localKeystore != null) {
                storeFile = file(localKeystore)
                storePassword = properties.getProperty("keystore.pass", System.getenv("KEYSTORE_PASS"))
                keyAlias = properties.getProperty("keystore.alias", System.getenv("KEYSTORE_ALIAS"))
                keyPassword = properties.getProperty("keystore.keyPass", System.getenv("KEYSTORE_KEYPASS"))
            }
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            rustProfile = 'debug'
        }
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard.flags'
            rustProfile = 'release'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "default"

    sourceSets {
        main {
            res.srcDirs = ['java/res']
            java.srcDirs = ['common/src', 'java/src']
            assets.srcDirs = ['java/assets']
            manifest.srcFile 'java/AndroidManifest.xml'
        }

        androidTest {
            res.srcDirs = ['tests/res']
            java.srcDirs = ['tests/src']
            manifest.srcFile "tests/AndroidManifest.xml"
        }
    }

    lintOptions {
        checkReleaseBuilds false
    }

    aaptOptions {
        noCompress 'dict'
    }

    externalNativeBuild {
        ndkBuild {
            path 'native/jni/Android.mk'
        }
    }
    ndkVersion '21.4.7075529'
}

apply plugin: 'org.mozilla.rust-android-gradle.rust-android'
cargo {
    module  = "native/rust"
    libname = "latinimers"
    targets = ["arm", "arm64", "x86", "x86_64"]
    profile = rustProfile
}

tasks.whenTaskAdded { task ->
    if ((task.name == 'javaPreCompileDebug' || task.name == 'javaPreCompileRelease')) {
        task.dependsOn 'cargoBuild'
    }
}

repositories {
    maven { url "../../../prebuilts/fullsdk-darwin/extras/android/m2repository" }
    maven { url "../../../prebuilts/fullsdk-linux/extras/android/m2repository" }
    mavenCentral()
    google()
}

dependencies {
    def emoji_version = '1.1.0'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "androidx.emoji2:emoji2:$emoji_version"
    implementation "androidx.emoji2:emoji2-bundled:$emoji_version"

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation "org.mockito:mockito-core:4.4.0"
    androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
    androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'androidx.annotation:annotation:1.4.0'
}
